---
- name: Clone application repository
  ansible.builtin.git:
    repo: "{{ repo_url }}"
    dest: "{{ app_dir }}"
    version: main
    update: yes

- name: Ensure Python venv exists
  ansible.builtin.command: python3 -m venv "{{ venv_dir }}"
  args:
    creates: "{{ venv_dir }}/bin/activate"

- name: Upgrade pip in venv
  ansible.builtin.pip:
    virtualenv: "{{ venv_dir }}"
    name: pip
    state: latest

- name: Install Python packages in venv
  ansible.builtin.pip:
    virtualenv: "{{ venv_dir }}"
    name:
      - flask
      - flask-sqlalchemy
      - psycopg2-binary

- name: Render application config from Terraform outputs
  ansible.builtin.template:
    src: config.py.j2
    dest: "{{ app_dir }}/webapp/config.py"
    mode: '0644'

- name: Render docker-compose.yml for webapp
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ app_dir }}/docker-compose.yml"
    mode: '0644'

- name: Start containers with docker-compose
  ansible.builtin.shell: |
    set -e
    docker-compose -f "{{ app_dir }}/docker-compose.yml" up -d
  args:
    executable: /bin/bash

- name: Ensure nginx config directory exists
  ansible.builtin.file:
    path: "{{ app_dir }}/nginx"
    state: directory
    mode: '0755'

- name: Render nginx.conf for containerized nginx
  ansible.builtin.template:
    src: "{{ role_path }}/../common/templates/nginx.conf.j2"
    dest: "{{ app_dir }}/nginx/nginx.conf"
    mode: '0644'

- name: Recreate services to pick up nginx config
  ansible.builtin.shell: |
    set -e
    docker-compose -f "{{ app_dir }}/docker-compose.yml" up -d --remove-orphans
  args:
    executable: /bin/bash


